/**
 * NOTE: This class is auto generated by the swagger code generator program (3.0.67).
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */
package io.swagger.api;

import io.swagger.model.Recipe;
import io.swagger.model.RecipeRequest;
import io.swagger.v3.oas.annotations.Operation;
import io.swagger.v3.oas.annotations.Parameter;
import io.swagger.v3.oas.annotations.enums.ParameterIn;
import io.swagger.v3.oas.annotations.responses.ApiResponses;
import io.swagger.v3.oas.annotations.responses.ApiResponse;
import io.swagger.v3.oas.annotations.media.ArraySchema;
import io.swagger.v3.oas.annotations.media.Content;
import io.swagger.v3.oas.annotations.media.Schema;
import io.swagger.v3.oas.annotations.security.SecurityRequirement;
import org.springframework.http.ResponseEntity;
import org.springframework.validation.annotation.Validated;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestHeader;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.RequestPart;
import org.springframework.web.multipart.MultipartFile;
import org.springframework.web.bind.annotation.CookieValue;

import javax.validation.Valid;
import javax.validation.constraints.*;
import java.util.List;
import java.util.Map;


@Validated
public interface RecipeApi {

    @Operation(
            summary = "Добавить новый рецепт",
            description = "",
            tags={ "api рецептов" }
    )
    @ApiResponses(value = { 
            @ApiResponse(
                    responseCode = "201",
                    description = "Успешная операция",
                    content = @Content(mediaType = "application/json",
                                        array = @ArraySchema(schema = @Schema(implementation = Recipe.class)))
            ),

            @ApiResponse(
                    responseCode = "400",
                    description = "Неверный формат ввода"
            )
        }
    )
    @RequestMapping(
            value = "/recipe",
            produces = { "application/json" },
            consumes = { "application/json" },
            method = RequestMethod.POST
    )
    ResponseEntity<Recipe> addRecipe(
            @RequestBody
            RecipeRequest body
    );


    @Operation(
            summary = "Удалить рецепт",
            description = "Удаляет рецепт",
            tags={ "api рецептов" })
    @ApiResponses(value = { 
            @ApiResponse(
                    responseCode = "200",
                    description = "Рецепт удален"
            ),

            @ApiResponse(
                    responseCode = "404",
                    description = "Рецепт не найден"
            )
        }
    )
    @RequestMapping(
            value = "/recipe/{id}",
            method = RequestMethod.DELETE)

    ResponseEntity<Void> deleteRecipe(
            @Parameter(in = ParameterIn.PATH, description = "идентификатор рецепта", required=true, schema=@Schema()) @PathVariable("id")
            Long id
    );


    @Operation(
            summary = "Найти рецепт по идентификатору",
            description = "Описание метода",
            tags={ "api рецептов" })
    @ApiResponses(value = {
            @ApiResponse(
                    responseCode = "200",
                    description = "успешная операция",
                    content = @Content(mediaType = "application/json",
                                        array = @ArraySchema(schema = @Schema(implementation = Recipe.class)))),

            @ApiResponse(
                    responseCode = "404",
                    description = "Рецепт не найден"
            )
        }
    )
    @RequestMapping(
            value = "/recipe/{id}",
            produces = { "application/json" },
            method = RequestMethod.GET)
    ResponseEntity<Recipe> getRecipeById(
            @Parameter(in = ParameterIn.PATH, description = "идентификатор рецепта", required=true, schema=@Schema()) @PathVariable("id")
            Long id
    );


    @Operation(
            summary = "просмотреть все рецепты",
            description = "",
            tags={ "api рецептов" })
    @ApiResponses(value = { 
            @ApiResponse(
                    responseCode = "200",
                    description = "успешная операция",
                    content = @Content(mediaType = "application/json",
                                        array = @ArraySchema(schema = @Schema(implementation = Recipe.class)))),

            @ApiResponse(
                    responseCode = "400",
                    description = "ошибка запроса"
            )
        }
    )
    @RequestMapping(
            value = "/recipe",
            produces = { "application/json" },
            method = RequestMethod.GET
    )
    ResponseEntity<List<Recipe>> getRecipes();
}

